"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201001preview = exports.v20200901 = exports.v20191101 = exports.v20181101preview = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./account"), exports);
__exportStar(require("./dataSet"), exports);
__exportStar(require("./dataSetMapping"), exports);
__exportStar(require("./getAccount"), exports);
__exportStar(require("./getDataSet"), exports);
__exportStar(require("./getDataSetMapping"), exports);
__exportStar(require("./getInvitation"), exports);
__exportStar(require("./getShare"), exports);
__exportStar(require("./getShareSubscription"), exports);
__exportStar(require("./getSynchronizationSetting"), exports);
__exportStar(require("./getTrigger"), exports);
__exportStar(require("./invitation"), exports);
__exportStar(require("./listShareSubscriptionSourceShareSynchronizationSettings"), exports);
__exportStar(require("./listShareSubscriptionSynchronizationDetails"), exports);
__exportStar(require("./listShareSubscriptionSynchronizations"), exports);
__exportStar(require("./listShareSynchronizationDetails"), exports);
__exportStar(require("./listShareSynchronizations"), exports);
__exportStar(require("./share"), exports);
__exportStar(require("./shareSubscription"), exports);
__exportStar(require("./synchronizationSetting"), exports);
__exportStar(require("./trigger"), exports);
// Export enums:
__exportStar(require("../types/enums/datashare"), exports);
// Export sub-modules:
const v20181101preview = require("./v20181101preview");
exports.v20181101preview = v20181101preview;
const v20191101 = require("./v20191101");
exports.v20191101 = v20191101;
const v20200901 = require("./v20200901");
exports.v20200901 = v20200901;
const v20201001preview = require("./v20201001preview");
exports.v20201001preview = v20201001preview;
// Import resources to register:
const account_1 = require("./account");
const dataSet_1 = require("./dataSet");
const dataSetMapping_1 = require("./dataSetMapping");
const invitation_1 = require("./invitation");
const share_1 = require("./share");
const shareSubscription_1 = require("./shareSubscription");
const synchronizationSetting_1 = require("./synchronizationSetting");
const trigger_1 = require("./trigger");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:datashare:Account":
                return new account_1.Account(name, undefined, { urn });
            case "azure-native:datashare:DataSet":
                return new dataSet_1.DataSet(name, undefined, { urn });
            case "azure-native:datashare:DataSetMapping":
                return new dataSetMapping_1.DataSetMapping(name, undefined, { urn });
            case "azure-native:datashare:Invitation":
                return new invitation_1.Invitation(name, undefined, { urn });
            case "azure-native:datashare:Share":
                return new share_1.Share(name, undefined, { urn });
            case "azure-native:datashare:ShareSubscription":
                return new shareSubscription_1.ShareSubscription(name, undefined, { urn });
            case "azure-native:datashare:SynchronizationSetting":
                return new synchronizationSetting_1.SynchronizationSetting(name, undefined, { urn });
            case "azure-native:datashare:Trigger":
                return new trigger_1.Trigger(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "datashare", _module);
//# sourceMappingURL=index.js.map