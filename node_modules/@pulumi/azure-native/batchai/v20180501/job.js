"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Job = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Information about a Job.
 */
class Job extends pulumi.CustomResource {
    /**
     * Create a Job resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        var _a;
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            if ((!args || args.experimentName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'experimentName'");
            }
            if ((!args || args.nodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeCount'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.stdOutErrPathPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stdOutErrPathPrefix'");
            }
            if ((!args || args.workspaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceName'");
            }
            inputs["caffe2Settings"] = args ? args.caffe2Settings : undefined;
            inputs["caffeSettings"] = args ? args.caffeSettings : undefined;
            inputs["chainerSettings"] = args ? args.chainerSettings : undefined;
            inputs["cluster"] = args ? args.cluster : undefined;
            inputs["cntkSettings"] = args ? args.cntkSettings : undefined;
            inputs["constraints"] = args ? args.constraints : undefined;
            inputs["containerSettings"] = args ? args.containerSettings : undefined;
            inputs["customMpiSettings"] = args ? args.customMpiSettings : undefined;
            inputs["customToolkitSettings"] = args ? args.customToolkitSettings : undefined;
            inputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            inputs["experimentName"] = args ? args.experimentName : undefined;
            inputs["horovodSettings"] = args ? args.horovodSettings : undefined;
            inputs["inputDirectories"] = args ? args.inputDirectories : undefined;
            inputs["jobName"] = args ? args.jobName : undefined;
            inputs["jobPreparation"] = args ? args.jobPreparation : undefined;
            inputs["mountVolumes"] = args ? args.mountVolumes : undefined;
            inputs["nodeCount"] = args ? args.nodeCount : undefined;
            inputs["outputDirectories"] = args ? args.outputDirectories : undefined;
            inputs["pyTorchSettings"] = args ? args.pyTorchSettings : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["schedulingPriority"] = (_a = (args ? args.schedulingPriority : undefined)) !== null && _a !== void 0 ? _a : "normal";
            inputs["secrets"] = args ? args.secrets : undefined;
            inputs["stdOutErrPathPrefix"] = args ? args.stdOutErrPathPrefix : undefined;
            inputs["tensorFlowSettings"] = args ? args.tensorFlowSettings : undefined;
            inputs["workspaceName"] = args ? args.workspaceName : undefined;
            inputs["creationTime"] = undefined /*out*/;
            inputs["executionInfo"] = undefined /*out*/;
            inputs["executionState"] = undefined /*out*/;
            inputs["executionStateTransitionTime"] = undefined /*out*/;
            inputs["jobOutputDirectoryPathSegment"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["provisioningStateTransitionTime"] = undefined /*out*/;
            inputs["toolType"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["caffe2Settings"] = undefined /*out*/;
            inputs["caffeSettings"] = undefined /*out*/;
            inputs["chainerSettings"] = undefined /*out*/;
            inputs["cluster"] = undefined /*out*/;
            inputs["cntkSettings"] = undefined /*out*/;
            inputs["constraints"] = undefined /*out*/;
            inputs["containerSettings"] = undefined /*out*/;
            inputs["creationTime"] = undefined /*out*/;
            inputs["customMpiSettings"] = undefined /*out*/;
            inputs["customToolkitSettings"] = undefined /*out*/;
            inputs["environmentVariables"] = undefined /*out*/;
            inputs["executionInfo"] = undefined /*out*/;
            inputs["executionState"] = undefined /*out*/;
            inputs["executionStateTransitionTime"] = undefined /*out*/;
            inputs["horovodSettings"] = undefined /*out*/;
            inputs["inputDirectories"] = undefined /*out*/;
            inputs["jobOutputDirectoryPathSegment"] = undefined /*out*/;
            inputs["jobPreparation"] = undefined /*out*/;
            inputs["mountVolumes"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["nodeCount"] = undefined /*out*/;
            inputs["outputDirectories"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["provisioningStateTransitionTime"] = undefined /*out*/;
            inputs["pyTorchSettings"] = undefined /*out*/;
            inputs["schedulingPriority"] = undefined /*out*/;
            inputs["secrets"] = undefined /*out*/;
            inputs["stdOutErrPathPrefix"] = undefined /*out*/;
            inputs["tensorFlowSettings"] = undefined /*out*/;
            inputs["toolType"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:batchai/v20180501:Job" }, { type: "azure-native:batchai:Job" }, { type: "azure-nextgen:batchai:Job" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Job.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Job(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Job.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Job.__pulumiType;
    }
}
exports.Job = Job;
/** @internal */
Job.__pulumiType = 'azure-native:batchai/v20180501:Job';
//# sourceMappingURL=job.js.map